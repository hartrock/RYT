#!/bin/bash

# Append/replace version string in referenced *.js.
SCRIPT_DIR=Scripts; . $SCRIPT_DIR/util.src

MAIN_JS=rytMain.js
VERSION=$1
DATE=`date "+%F"`
VERSION_DATE="$VERSION ($DATE)"
RELEASE_TAG_REGEX='^v[0-9][0-9]*.*\.[0-9]*[0-9]$'

if [[ $# -ne 1 || (! $VERSION =~ $RELEASE_TAG_REGEX ) ]]
then
    usage "VERSION (v0.0, v1.0, v0.1, v1.34.5, ...; note the 'v' at the beginning)"
else
    info "VERSION: $VERSION"
fi

GREP_STR_VERSION_INFO='\(var version = "RYT\)[^"]*"'
SED_STR_VERSION_INFO='s/'$GREP_STR_VERSION_INFO'/\1'$VERSION_DATE'"/'
SED_STR_VERSION_SHORT='s/ *var version = "RYT\([^"]*\)".*/\1/'
OLD_VERSION=`grep "$GREP_STR_VERSION_INFO" $MAIN_JS \
             | sed -e "$SED_STR_VERSION_SHORT"`

info "old version: $OLD_VERSION <- $MAIN_JS"
info "new version: $VERSION_DATE -> $MAIN_JS"
yesNo "Edit version info in $MAIN_JS?" && {
    info "old line:"
    grep "$GREP_STR_VERSION_INFO" $MAIN_JS
    sed -e "$SED_STR_VERSION_INFO" -i'.old' $MAIN_JS || error "sed of $MAIN_JS";
    info "new line:"
    grep "$GREP_STR_VERSION_INFO" $MAIN_JS
}
yesNo "git commit?" && {
#    darcs rec --patch-name "$0 $VERSION" --interactive || error "darcs rec";
    git commit -a -m "$0 $VERSION" || error "git commit";
}

yesNo "Tag with $VERSION in git?" && {
    git tag $VERSION || error "git tag $VERSION";
}

yesNo "make upgrade?" && {
    make upgrade || error "make upgrade";
}


yesNo "cleanOldReleases?" && {
    $SCRIPT_DIR/cleanOldReleases || error "cleanOldReleases"
}

# for lftp push to external server
#  $SCRIPT_DIR/external_pushToServer

yesNo "git push?" && {
    git push --tags -u origin master || error "git push";
}

success
